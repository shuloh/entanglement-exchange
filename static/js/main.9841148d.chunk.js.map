{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","utils/getWeb3.js","Store.js","NavBar.jsx","Home.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","getWeb3","a","window","ethereum","autoRefreshOnNetworkChange","web3","Web3","enable","console","log","provider","providers","HttpProvider","Store","React","createContext","initialState","network","account","contract","reducer","state","action","type","payload","StoreProvider","props","useReducer","value","dispatch","Provider","children","useStyles","makeStyles","theme","root","flexGrow","background","connector","display","flexWrap","menuButton","marginRight","spacing","title","NavBar","classes","useContext","connectWeb3","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","PrivSecMarket","networks","instance","Contract","abi","address","alert","JSON","stringify","Fragment","AppBar","position","className","Toolbar","IconButton","edge","color","aria-label","Typography","variant","FormGroup","FormControlLabel","labelPlacement","control","Switch","checked","disabled","onChange","label","gutterBottom","Home","CssBaseline","Container","width","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,4OCqBVC,EA3BF,uCAAG,kCAAAC,EAAA,0DAGVC,OAAOC,SAHG,uBAIZD,OAAOC,SAASC,4BAA6B,EACvCC,EAAO,IAAIC,IAAKJ,OAAOC,UALjB,SAOND,OAAOC,SAASI,SAPV,gCASLF,GATK,WAYLH,OAAOG,KAZF,wBAcNA,EAAOH,OAAOG,KACpBG,QAAQC,IAAI,2BAfA,kBAgBLJ,GAhBK,eAoBNK,EAAW,IAAIJ,IAAKK,UAAUC,aAAa,yBAC3CP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDAtBA,kBAuBLJ,GAvBK,4CAAH,qD,mlBCAN,IAAMQ,EAAQC,IAAMC,gBAErBC,EAAe,CACnBC,QAAS,KACTC,QAAS,KACTC,SAAU,MAGZ,SAASC,EAAQC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,cACH,OAAO,EAAP,GAAYF,EAAZ,CAAmBJ,QAASK,EAAOE,UACrC,IAAK,cACH,OAAO,EAAP,GAAYH,EAAZ,CAAmBH,QAASI,EAAOE,UACrC,IAAK,eACH,OAAO,EAAP,GAAYH,EAAZ,CAAmBF,SAAUG,EAAOE,UACtC,QACE,OAAOH,GAIN,SAASI,EAAcC,GAAQ,IAAD,EACTZ,IAAMa,WAAWP,EAASJ,GADjB,mBAE7BY,EAAQ,CAAEP,MAFmB,KAEZQ,SAFY,MAGnC,OAAO,kBAAChB,EAAMiB,SAAP,CAAgBF,MAAOA,GAAQF,EAAMK,UCX9C,IAAMC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,EACVC,WAAY,qDAEdC,UAAW,CACTC,QAAS,OACTC,SAAU,QAEZC,WAAY,CACVC,YAAaR,EAAMS,QAAQ,IAE7BC,MAAO,CACLR,SAAU,OAIC,SAASS,IACtB,IAAMC,EAAUd,IADe,EAEHe,qBAAWlC,GAA/BQ,EAFuB,EAEvBA,MAAOQ,EAFgB,EAEhBA,SACTmB,EAAW,uCAAG,oCAAA/C,EAAA,+EAGGD,IAHH,cAGVK,EAHU,gBAMOA,EAAK4C,IAAIC,cANhB,cAMVC,EANU,OAOhBtB,EAAS,CACPN,KAAM,cACNC,QAAS2B,EAAS,KATJ,UAaQ9C,EAAK4C,IAAIG,IAAIC,QAbrB,QAaVC,EAbU,OAchBzB,EAAS,CACPN,KAAM,cACNC,QAAS8B,IAELC,EAAkBC,EAAcC,SAASH,GACzCI,EAAW,IAAIrD,EAAK4C,IAAIU,SAC5BH,EAAcI,IACdL,GAAmBA,EAAgBM,SAErChC,EAAS,CACPN,KAAM,eACNC,QAASkC,IAzBK,kDA6BhBI,MAAM,SAAWC,KAAKC,UAAL,OA7BD,0DAAH,qDAgCjB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,UAAWtB,EAAQX,MAC3C,kBAACkC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLH,UAAWtB,EAAQL,WACnB+B,MAAM,UACNC,aAAW,QAEX,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKP,UAAWtB,EAAQF,OAA5C,4CAGA,kBAACgC,EAAA,EAAD,CAAWR,UAAWtB,EAAQR,WAC5B,kBAACuC,EAAA,EAAD,CACET,UAAWtB,EAAQR,UACnBwC,eAAe,QACfC,QACE,kBAACC,EAAA,EAAD,CACEZ,UAAWtB,EAAQR,UACnB2C,QAA2B,OAAlB5D,EAAMH,QACfgE,SAA4B,OAAlB7D,EAAMH,QAChBiE,SAAUnC,EACVyB,aAAW,mBAGfW,MACE,kBAACV,EAAA,EAAD,CACEC,QAAQ,UACRP,UAAWtB,EAAQF,MACnByC,cAAY,GAEXhE,EAAMH,QAAUG,EAAMH,QAAU,sBChGpC,SAASoE,IACtB,OACE,6BACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,MAAM,OACf,kBAAC5C,EAAD,QCEO6C,MARf,WACE,OACE,kBAACjE,EAAD,KACE,kBAAC6D,EAAD,QCKcK,QACW,cAA7BzF,OAAO0F,SAASC,UAEe,UAA7B3F,OAAO0F,SAASC,UAEhB3F,OAAO0F,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9841148d.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 330;","import Web3 from \"web3\";\n\nconst getWeb3 = async () => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  // Modern dapp browsers...\n  if (window.ethereum) {\n    window.ethereum.autoRefreshOnNetworkChange = false;\n    const web3 = new Web3(window.ethereum);\n    // Request account access if needed\n    await window.ethereum.enable();\n    // Acccounts now exposed\n    return web3;\n  }\n  // Legacy dapp browsers...\n  else if (window.web3) {\n    // Use Mist/MetaMask's provider.\n    const web3 = window.web3;\n    console.log(\"Injected web3 detected.\");\n    return web3;\n  }\n  // Fallback to localhost; use dev console port by default...\n  else {\n    const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n    const web3 = new Web3(provider);\n    console.log(\"No web3 instance injected, using Local web3.\");\n    return web3;\n  }\n};\n\nexport default getWeb3;\n","import React from \"react\";\n\nexport const Store = React.createContext();\n\nconst initialState = {\n  network: null,\n  account: null,\n  contract: null\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"SET_NETWORK\":\n      return { ...state, network: action.payload };\n    case \"SET_ACCOUNT\":\n      return { ...state, account: action.payload };\n    case \"SET_CONTRACT\":\n      return { ...state, contract: action.payload };\n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  const value = { state, dispatch };\n  return <Store.Provider value={value}>{props.children}</Store.Provider>;\n}\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport PrivSecMarket from \"./contracts/PrivSecMarket.json\";\nimport { Store } from \"./Store\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    background: \"linear-gradient(160deg, #0093E9 0%, #80D0C7 100%)\"\n  },\n  connector: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nexport default function NavBar() {\n  const classes = useStyles();\n  const { state, dispatch } = useContext(Store);\n  const connectWeb3 = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      dispatch({\n        type: \"SET_ACCOUNT\",\n        payload: accounts[0]\n      });\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      dispatch({\n        type: \"SET_NETWORK\",\n        payload: networkId\n      });\n      const deployedNetwork = PrivSecMarket.networks[networkId];\n      const instance = new web3.eth.Contract(\n        PrivSecMarket.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      dispatch({\n        type: \"SET_CONTRACT\",\n        payload: instance\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\"error:\" + JSON.stringify(error));\n    }\n  };\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\" className={classes.root}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Entanglement Exchange: ERC20 Marketplace\n          </Typography>\n          <FormGroup className={classes.connector}>\n            <FormControlLabel\n              className={classes.connector}\n              labelPlacement=\"start\"\n              control={\n                <Switch\n                  className={classes.connector}\n                  checked={state.account !== null}\n                  disabled={state.account !== null}\n                  onChange={connectWeb3}\n                  aria-label=\"connect switch\"\n                />\n              }\n              label={\n                <Typography\n                  variant=\"caption\"\n                  className={classes.title}\n                  gutterBottom\n                >\n                  {state.account ? state.account : \"Connect Web3\"}\n                </Typography>\n              }\n            />\n          </FormGroup>\n        </Toolbar>\n      </AppBar>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { Container } from \"@material-ui/core\";\nimport NavBar from \"./NavBar\";\n\nexport default function Home() {\n  return (\n    <div>\n      <CssBaseline />\n      <Container width=\"75%\">\n        <NavBar />\n      </Container>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Home from \"./Home\";\nimport { StoreProvider } from \"./Store\";\n\nfunction App() {\n  return (\n    <StoreProvider>\n      <Home />\n    </StoreProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}