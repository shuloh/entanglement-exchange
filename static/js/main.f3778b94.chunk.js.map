{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","utils/getWeb3.js","Store.js","NavDrawer.js","NavBar.js","ListedCompanyCard.js","ListedCompaniesGrid.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","getWeb3","a","window","ethereum","autoRefreshOnNetworkChange","web3","Web3","enable","console","log","provider","providers","HttpProvider","Store","React","createContext","initialState","network","account","contract","sideBarOpen","listedCompanies","nListedCompanies","reducer","state","action","type","payload","StoreProvider","props","useReducer","value","dispatch","Provider","children","useStyles","makeStyles","theme","list","width","fullList","menuButton","marginRight","spacing","TemporaryDrawer","classes","useContext","toggleDrawer","side","open","event","key","switchOpenMode","methods","send","IconButton","edge","className","color","aria-label","onClick","Drawer","onClose","role","onKeyDown","List","ListItem","button","ListItemIcon","ListItemText","primary","Divider","root","flexGrow","background","title","NavBar","connectWeb3","eth","getAccounts","accounts","defaultAccount","net","getId","networkId","deployedProxy","PrivateExchangeProxy","networks","instance","Contract","PrivateExchangeLogic","abi","address","numberOfListedCompanies","call","i","privateCompany","push","alert","JSON","stringify","Fragment","AppBar","position","Toolbar","Typography","variant","Switch","checked","disabled","onChange","card","minWidth","bullet","display","margin","transform","fontSize","pos","marginBottom","ListedCompanyCard","Card","CardContent","component","companyDescr","symbol","name","CardActions","Button","size","ListedCompaniesGrid","Grid","container","direction","justify","alignItems","map","index","item","paper","Home","CssBaseline","Container","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3778b94.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 349;","import Web3 from \"web3\";\n\nconst getWeb3 = async () => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  // Modern dapp browsers...\n  if (window.ethereum) {\n    window.ethereum.autoRefreshOnNetworkChange = false;\n    const web3 = new Web3(window.ethereum);\n    // Request account access if needed\n    await window.ethereum.enable();\n    // Acccounts now exposed\n    return web3;\n  }\n  // Legacy dapp browsers...\n  else if (window.web3) {\n    // Use Mist/MetaMask's provider.\n    const web3 = window.web3;\n    console.log(\"Injected web3 detected.\");\n    return web3;\n  }\n  // Fallback to localhost; use dev console port by default...\n  else {\n    const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n    const web3 = new Web3(provider);\n    console.log(\"No web3 instance injected, using Local web3.\");\n    return web3;\n  }\n};\n\nexport default getWeb3;\n","import React from \"react\";\n\nexport const Store = React.createContext();\n\nconst initialState = {\n  network: null,\n  account: null,\n  contract: null,\n\n  sideBarOpen: false,\n  listedCompanies: [],\n  nListedCompanies: 0\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"SET_NETWORK\":\n      return { ...state, network: action.payload };\n    case \"SET_ACCOUNT\":\n      return { ...state, account: action.payload };\n    case \"SET_CONTRACT\":\n      return { ...state, contract: action.payload };\n    case \"SIDE_DRAWER\":\n      return { ...state, sideBarOpen: action.payload };\n    case \"SET_NLISTEDCOMPANIES\":\n      return { ...state, nListedCompanies: action.payload };\n    case \"SET_LISTEDCOMPANIES\":\n      return { ...state, listedCompanies: action.payload };\n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  const value = { state, dispatch };\n  return <Store.Provider value={value}>{props.children}</Store.Provider>;\n}\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nimport { Store } from \"./Store\";\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 250\n  },\n  fullList: {\n    width: \"auto\"\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nexport default function TemporaryDrawer() {\n  const classes = useStyles();\n  const { state, dispatch } = useContext(Store);\n\n  const toggleDrawer = (side, open) => event => {\n    if (\n      event.type === \"keydown\" &&\n      (event.key === \"Tab\" || event.key === \"Shift\")\n    ) {\n      return;\n    }\n    dispatch({\n      type: \"SIDE_DRAWER\",\n      payload: open\n    });\n  };\n  const switchOpenMode = async () => {\n    if (state.contract !== null) {\n      await state.contract.methods.switchOpenMode(true).send();\n    }\n  };\n\n  const sideList = side => (\n    <div\n      className={classes.list}\n      role=\"presentation\"\n      onClick={toggleDrawer(side, false)}\n      onKeyDown={toggleDrawer(side, false)}\n    >\n      <List>\n        <ListItem button key={\"Home\"}>\n          <ListItemIcon>\n            <AppsIcon />\n          </ListItemIcon>\n          <ListItemText primary={\"Home\"} />\n        </ListItem>\n        <ListItem button key={\"Turn On\"} onClick={switchOpenMode}>\n          <ListItemIcon>\n            <AppsIcon />\n          </ListItemIcon>\n          <ListItemText primary={\"Turn On\"} />\n        </ListItem>\n      </List>\n      <Divider />\n    </div>\n  );\n\n  return (\n    <div>\n      <IconButton\n        edge=\"start\"\n        className={classes.menuButton}\n        color=\"inherit\"\n        aria-label=\"menu\"\n        onClick={toggleDrawer(\"left\", true)}\n      >\n        <MenuIcon />\n      </IconButton>\n      <Drawer open={state.sideBarOpen} onClose={toggleDrawer(\"left\", false)}>\n        {sideList(\"left\")}\n      </Drawer>\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Switch from \"@material-ui/core/Switch\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport TemporaryDrawer from \"./NavDrawer\";\nimport PrivateExchangeProxy from \"./contracts/PrivateExchangeProxy.json\";\nimport PrivateExchangeLogic from \"./contracts/PrivateExchangeLogic.json\";\n\nimport { Store } from \"./Store\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    background: \"linear-gradient(160deg, #0093E9 0%, #80D0C7 100%)\"\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nexport default function NavBar() {\n  const classes = useStyles();\n  const { state, dispatch } = useContext(Store);\n  const connectWeb3 = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      web3.eth.defaultAccount = accounts[0];\n      dispatch({\n        type: \"SET_ACCOUNT\",\n        payload: accounts[0]\n      });\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      dispatch({\n        type: \"SET_NETWORK\",\n        payload: networkId\n      });\n      const deployedProxy = PrivateExchangeProxy.networks[networkId];\n      const instance = new web3.eth.Contract(\n        PrivateExchangeLogic.abi,\n        deployedProxy.address\n      );\n      dispatch({\n        type: \"SET_CONTRACT\",\n        payload: instance\n      });\n\n      const nListedCompanies = await instance.methods\n        .numberOfListedCompanies()\n        .call();\n      dispatch({\n        type: \"SET_NLISTEDCOMPANIES\",\n        payload: nListedCompanies\n      });\n\n      var listedCompanies = [];\n      for (var i = 0; i < nListedCompanies; i++) {\n        const privateCompany = await instance.methods.listedCompanies.call(i);\n        listedCompanies.push(privateCompany);\n      }\n      dispatch({\n        type: \"SET_LISTEDCOMPANIES\",\n        payload: listedCompanies\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\"error:\" + JSON.stringify(error));\n    }\n  };\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\" className={classes.root}>\n        <Toolbar>\n          <TemporaryDrawer />\n          <Typography variant=\"h6\" className={classes.title}>\n            Entanglement Exchange\n          </Typography>\n          <Switch\n            checked={state.account !== null}\n            disabled={state.account !== null}\n            onChange={connectWeb3}\n            aria-label=\"Connect\"\n          />{\" \"}\n          <Typography variant=\"body2\">\n            {state.account ? state.account : \"Connect Web3\"}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 275\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n\nexport default function ListedCompanyCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\">\n          {props.companyDescr.symbol}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          {props.companyDescr.name}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          {props.companyDescr.address}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Learn More</Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ListedCompanyCard from \"./ListedCompanyCard\";\nimport { Store } from \"./Store\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  }\n}));\n\nexport default function ListedCompaniesGrid() {\n  const classes = useStyles();\n  const { state } = useContext(Store);\n\n  return (\n    <Grid\n      container\n      className={classes.root}\n      direction=\"row\"\n      justify=\"space-evenly\"\n      alignItems=\"flex-start\"\n      spacing={2}\n    >\n      {state.listedCompanies.map((value, index) => (\n        <Grid key={value} item>\n          <ListedCompanyCard className={classes.paper} companyDescr={value} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { Container } from \"@material-ui/core\";\nimport NavBar from \"./NavBar\";\nimport ListedCompaniesGrid from \"./ListedCompaniesGrid\";\n\nexport default function Home() {\n  return (\n    <div>\n      <CssBaseline />\n      <Container width=\"75%\">\n        <NavBar />\n        <ListedCompaniesGrid />\n      </Container>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Home from \"./Home\";\nimport { StoreProvider } from \"./Store\";\n\nfunction App() {\n  return (\n    <StoreProvider>\n      <Home />\n    </StoreProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}